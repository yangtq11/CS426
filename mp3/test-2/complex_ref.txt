declare i32 @strcmp(i8*, i8*)
declare i32 @printf(i8*, ...)
declare void @abort()
declare i8* @malloc(i32)
declare %Object* @Object_new()
declare %Object* @Object_abort(%Object*)
declare %String* @Object_type_name(%Object*)
declare %Object* @Object_copy(%Object*)
declare %IO* @IO_new()
declare %IO* @IO_out_string(%IO*, %String*)
declare %IO* @IO_out_int(%IO*, i32)
declare %String* @IO_in_string(%IO*)
declare i32 @IO_in_int(%IO*)
declare %String* @String_new()
declare i32 @String_length(%String*)
declare %String* @String_concat(%String*, %String*)
declare %String* @String_substr(%String*, i32, i32)
declare %Int* @Int_new()
declare void @Int_init(%Int*, i32)
declare %Bool* @Bool_new()
declare void @Bool_init(%Bool*, i1)
@str.Object = internal constant [7 x i8] c"Object\00", align 1
%Object = type {
	%Object_vtable*
}

%Object_vtable = type {
	i32,
	i32,
	i8*,
	%Object* () *,
	%Object* (%Object*) *,
	%String* (%Object*) *,
	%Object* (%Object*) *
}

@Object_vtable_prototype = constant %Object_vtable {
	i32 0,
	i32 ptrtoint (%Object* getelementptr (%Object, %Object* null, i32 1) to i32),
	i8* getelementptr ([7 x i8], [7 x i8]* @str.Object, i32 0, i32 0),
	%Object* () * @Object_new,
	%Object* (%Object*) * @Object_abort,
	%String* (%Object*) * @Object_type_name,
	%Object* (%Object*) * @Object_copy
}

@str.Int = internal constant [4 x i8] c"Int\00", align 1
%Int = type {
	%Int_vtable*,
	i32
}

%Int_vtable = type {
	i32,
	i32,
	i8*,
	%Int* () *,
	%Object* (%Int*) *,
	%String* (%Int*) *,
	%Int* (%Int*) *
}

@Int_vtable_prototype = constant %Int_vtable {
	i32 1,
	i32 ptrtoint (%Int* getelementptr (%Int, %Int* null, i32 1) to i32),
	i8* getelementptr ([4 x i8], [4 x i8]* @str.Int, i32 0, i32 0),
	%Int* () * @Int_new,
	%Object* (%Int*) * bitcast (%Object* (%Object*) * @Object_abort to %Object* (%Int*) *),
	%String* (%Int*) * bitcast (%String* (%Object*) * @Object_type_name to %String* (%Int*) *),
	%Int* (%Int*) * bitcast (%Object* (%Object*) * @Object_copy to %Int* (%Int*) *)
}

@str.Bool = internal constant [5 x i8] c"Bool\00", align 1
%Bool = type {
	%Bool_vtable*,
	i1
}

%Bool_vtable = type {
	i32,
	i32,
	i8*,
	%Bool* () *,
	%Object* (%Bool*) *,
	%String* (%Bool*) *,
	%Bool* (%Bool*) *
}

@Bool_vtable_prototype = constant %Bool_vtable {
	i32 2,
	i32 ptrtoint (%Bool* getelementptr (%Bool, %Bool* null, i32 1) to i32),
	i8* getelementptr ([5 x i8], [5 x i8]* @str.Bool, i32 0, i32 0),
	%Bool* () * @Bool_new,
	%Object* (%Bool*) * bitcast (%Object* (%Object*) * @Object_abort to %Object* (%Bool*) *),
	%String* (%Bool*) * bitcast (%String* (%Object*) * @Object_type_name to %String* (%Bool*) *),
	%Bool* (%Bool*) * bitcast (%Object* (%Object*) * @Object_copy to %Bool* (%Bool*) *)
}

@str.String = internal constant [7 x i8] c"String\00", align 1
%String = type {
	%String_vtable*,
	i8*
}

%String_vtable = type {
	i32,
	i32,
	i8*,
	%String* () *,
	%Object* (%String*) *,
	%String* (%String*) *,
	%String* (%String*) *,
	i32 (%String*) *,
	%String* (%String*,%String*) *,
	%String* (%String*,i32,i32) *
}

@String_vtable_prototype = constant %String_vtable {
	i32 3,
	i32 ptrtoint (%String* getelementptr (%String, %String* null, i32 1) to i32),
	i8* getelementptr ([7 x i8], [7 x i8]* @str.String, i32 0, i32 0),
	%String* () * @String_new,
	%Object* (%String*) * bitcast (%Object* (%Object*) * @Object_abort to %Object* (%String*) *),
	%String* (%String*) * bitcast (%String* (%Object*) * @Object_type_name to %String* (%String*) *),
	%String* (%String*) * bitcast (%Object* (%Object*) * @Object_copy to %String* (%String*) *),
	i32 (%String*) * @String_length,
	%String* (%String*,%String*) * @String_concat,
	%String* (%String*,i32,i32) * @String_substr
}

@str.IO = internal constant [3 x i8] c"IO\00", align 1
%IO = type {
	%IO_vtable*
}

%IO_vtable = type {
	i32,
	i32,
	i8*,
	%IO* () *,
	%Object* (%IO*) *,
	%String* (%IO*) *,
	%IO* (%IO*) *,
	%IO* (%IO*,%String*) *,
	%IO* (%IO*,i32) *,
	%String* (%IO*) *,
	i32 (%IO*) *
}

@IO_vtable_prototype = constant %IO_vtable {
	i32 4,
	i32 ptrtoint (%IO* getelementptr (%IO, %IO* null, i32 1) to i32),
	i8* getelementptr ([3 x i8], [3 x i8]* @str.IO, i32 0, i32 0),
	%IO* () * @IO_new,
	%Object* (%IO*) * bitcast (%Object* (%Object*) * @Object_abort to %Object* (%IO*) *),
	%String* (%IO*) * bitcast (%String* (%Object*) * @Object_type_name to %String* (%IO*) *),
	%IO* (%IO*) * bitcast (%Object* (%Object*) * @Object_copy to %IO* (%IO*) *),
	%IO* (%IO*,%String*) * @IO_out_string,
	%IO* (%IO*,i32) * @IO_out_int,
	%String* (%IO*) * @IO_in_string,
	i32 (%IO*) * @IO_in_int
}

@str.Main = internal constant [5 x i8] c"Main\00", align 1
%Main = type {
	%Main_vtable*
}

%Main_vtable = type {
	i32,
	i32,
	i8*,
	%Main* () *,
	%Object* (%Main*) *,
	%String* (%Main*) *,
	%Main* (%Main*) *,
	%Main* (%Main*,%String*) *,
	%Main* (%Main*,i32) *,
	%String* (%Main*) *,
	i32 (%Main*) *,
	%Main* (%Main*) *
}

@Main_vtable_prototype = constant %Main_vtable {
	i32 5,
	i32 ptrtoint (%Main* getelementptr (%Main, %Main* null, i32 1) to i32),
	i8* getelementptr ([5 x i8], [5 x i8]* @str.Main, i32 0, i32 0),
	%Main* () * @Main_new,
	%Object* (%Main*) * bitcast (%Object* (%Object*) * @Object_abort to %Object* (%Main*) *),
	%String* (%Main*) * bitcast (%String* (%Object*) * @Object_type_name to %String* (%Main*) *),
	%Main* (%Main*) * bitcast (%Object* (%Object*) * @Object_copy to %Main* (%Main*) *),
	%Main* (%Main*,%String*) * bitcast (%IO* (%IO*,%String*) * @IO_out_string to %Main* (%Main*,%String*) *),
	%Main* (%Main*,i32) * bitcast (%IO* (%IO*,i32) * @IO_out_int to %Main* (%Main*,i32) *),
	%String* (%Main*) * bitcast (%String* (%IO*) * @IO_in_string to %String* (%Main*) *),
	i32 (%Main*) * bitcast (i32 (%IO*) * @IO_in_int to i32 (%Main*) *),
	%Main* (%Main*) * @Main_main
}

@str.Complex = internal constant [8 x i8] c"Complex\00", align 1
%Complex = type {
	%Complex_vtable*,
	i32,
	i32
}

%Complex_vtable = type {
	i32,
	i32,
	i8*,
	%Complex* () *,
	%Object* (%Complex*) *,
	%String* (%Complex*) *,
	%Complex* (%Complex*) *,
	%Complex* (%Complex*,%String*) *,
	%Complex* (%Complex*,i32) *,
	%String* (%Complex*) *,
	i32 (%Complex*) *,
	%Complex* (%Complex*,i32,i32) *,
	%Object* (%Complex*) *,
	%Complex* (%Complex*) *,
	%Complex* (%Complex*) *,
	%Complex* (%Complex*) *,
	i1 (%Complex*,%Complex*) *,
	i32 (%Complex*) *,
	i32 (%Complex*) *
}

@Complex_vtable_prototype = constant %Complex_vtable {
	i32 6,
	i32 ptrtoint (%Complex* getelementptr (%Complex, %Complex* null, i32 1) to i32),
	i8* getelementptr ([8 x i8], [8 x i8]* @str.Complex, i32 0, i32 0),
	%Complex* () * @Complex_new,
	%Object* (%Complex*) * bitcast (%Object* (%Object*) * @Object_abort to %Object* (%Complex*) *),
	%String* (%Complex*) * bitcast (%String* (%Object*) * @Object_type_name to %String* (%Complex*) *),
	%Complex* (%Complex*) * bitcast (%Object* (%Object*) * @Object_copy to %Complex* (%Complex*) *),
	%Complex* (%Complex*,%String*) * bitcast (%IO* (%IO*,%String*) * @IO_out_string to %Complex* (%Complex*,%String*) *),
	%Complex* (%Complex*,i32) * bitcast (%IO* (%IO*,i32) * @IO_out_int to %Complex* (%Complex*,i32) *),
	%String* (%Complex*) * bitcast (%String* (%IO*) * @IO_in_string to %String* (%Complex*) *),
	i32 (%Complex*) * bitcast (i32 (%IO*) * @IO_in_int to i32 (%Complex*) *),
	%Complex* (%Complex*,i32,i32) * @Complex_init,
	%Object* (%Complex*) * @Complex_print,
	%Complex* (%Complex*) * @Complex_reflect_0,
	%Complex* (%Complex*) * @Complex_reflect_X,
	%Complex* (%Complex*) * @Complex_reflect_Y,
	i1 (%Complex*,%Complex*) * @Complex_equal,
	i32 (%Complex*) * @Complex_x_value,
	i32 (%Complex*) * @Complex_y_value
}

@str.5 = internal constant [14 x i8] c"<basic class>\00", align 1
@String.5 = constant %String {
	%String_vtable* @String_vtable_prototype,
	i8* getelementptr ([14 x i8], [14 x i8]* @str.5, i32 0, i32 0)
}

@str.4 = internal constant [2 x i8] c"I\00", align 1
@String.4 = constant %String {
	%String_vtable* @String_vtable_prototype,
	i8* getelementptr ([2 x i8], [2 x i8]* @str.4, i32 0, i32 0)
}

@str.3 = internal constant [2 x i8] c"+\00", align 1
@String.3 = constant %String {
	%String_vtable* @String_vtable_prototype,
	i8* getelementptr ([2 x i8], [2 x i8]* @str.3, i32 0, i32 0)
}

@str.2 = internal constant [4 x i8] c"=(\0A\00", align 1
@String.2 = constant %String {
	%String_vtable* @String_vtable_prototype,
	i8* getelementptr ([4 x i8], [4 x i8]* @str.2, i32 0, i32 0)
}

@str.1 = internal constant [4 x i8] c"=)\0A\00", align 1
@String.1 = constant %String {
	%String_vtable* @String_vtable_prototype,
	i8* getelementptr ([4 x i8], [4 x i8]* @str.1, i32 0, i32 0)
}

@str.0 = internal constant [15 x i8] c"new_complex.cl\00", align 1
@String.0 = constant %String {
	%String_vtable* @String_vtable_prototype,
	i8* getelementptr ([15 x i8], [15 x i8]* @str.0, i32 0, i32 0)
}

define i32 @main() {
entry:
	%main.obj = call %Main*() @Main_new( )
	%main.retval = call %Main*(%Main*) @Main_main( %Main* %main.obj )
	ret i32 0
}

define %Main* @Main_main(%Main* %self) {

entry:
	%tmp.0 = alloca %Main*
	store %Main* %self, %Main** %tmp.0
	%tmp.1 = call %Complex* @Complex_new(  )
	%tmp.2 = icmp eq %Complex* %tmp.1, null
	br i1 %tmp.2, label %abort, label %ok.0

ok.0:
	%tmp.3 = getelementptr %Complex, %Complex* %tmp.1, i32 0, i32 0
	%tmp.4 = load %Complex_vtable*, %Complex_vtable** %tmp.3
	%tmp.5 = getelementptr %Complex_vtable, %Complex_vtable* %tmp.4, i32 0, i32 11
	%tmp.6 = load %Complex* (%Complex*,i32,i32) *, %Complex* (%Complex*,i32,i32) ** %tmp.5
	%tmp.7 = call %Complex*(%Complex*, i32, i32) %tmp.6( %Complex* %tmp.1, i32 1, i32 1 )
	%tmp.8 = alloca %Complex*
	store %Complex* %tmp.7, %Complex** %tmp.8
	%tmp.9 = alloca %Main*
	%tmp.10 = load %Complex*, %Complex** %tmp.8
	%tmp.11 = icmp eq %Complex* %tmp.10, null
	br i1 %tmp.11, label %abort, label %ok.1

ok.1:
	%tmp.12 = getelementptr %Complex, %Complex* %tmp.10, i32 0, i32 0
	%tmp.13 = load %Complex_vtable*, %Complex_vtable** %tmp.12
	%tmp.14 = getelementptr %Complex_vtable, %Complex_vtable* %tmp.13, i32 0, i32 14
	%tmp.15 = load %Complex* (%Complex*) *, %Complex* (%Complex*) ** %tmp.14
	%tmp.16 = call %Complex*(%Complex*) %tmp.15( %Complex* %tmp.10 )
	%tmp.17 = load %Complex*, %Complex** %tmp.8
	%tmp.18 = icmp eq %Complex* %tmp.17, null
	br i1 %tmp.18, label %abort, label %ok.2

ok.2:
	%tmp.19 = getelementptr %Complex, %Complex* %tmp.17, i32 0, i32 0
	%tmp.20 = load %Complex_vtable*, %Complex_vtable** %tmp.19
	%tmp.21 = getelementptr %Complex_vtable, %Complex_vtable* %tmp.20, i32 0, i32 13
	%tmp.22 = load %Complex* (%Complex*) *, %Complex* (%Complex*) ** %tmp.21
	%tmp.23 = call %Complex*(%Complex*) %tmp.22( %Complex* %tmp.17 )
	%tmp.24 = icmp eq %Complex* %tmp.16, %tmp.23
	br i1 %tmp.24, label %true.0, label %false.0

true.0:
	%tmp.25 = load %Main*, %Main** %tmp.0
	%tmp.26 = icmp eq %Main* %tmp.25, null
	br i1 %tmp.26, label %abort, label %ok.3

ok.3:
	%tmp.27 = getelementptr %Main, %Main* %tmp.25, i32 0, i32 0
	%tmp.28 = load %Main_vtable*, %Main_vtable** %tmp.27
	%tmp.29 = getelementptr %Main_vtable, %Main_vtable* %tmp.28, i32 0, i32 7
	%tmp.30 = load %Main* (%Main*,%String*) *, %Main* (%Main*,%String*) ** %tmp.29
	%tmp.31 = call %Main*(%Main*, %String*) %tmp.30( %Main* %tmp.25, %String* @String.1 )
	store %Main* %tmp.31, %Main** %tmp.9
	br label %end.0

false.0:
	%tmp.32 = load %Main*, %Main** %tmp.0
	%tmp.33 = icmp eq %Main* %tmp.32, null
	br i1 %tmp.33, label %abort, label %ok.4

ok.4:
	%tmp.34 = getelementptr %Main, %Main* %tmp.32, i32 0, i32 0
	%tmp.35 = load %Main_vtable*, %Main_vtable** %tmp.34
	%tmp.36 = getelementptr %Main_vtable, %Main_vtable* %tmp.35, i32 0, i32 7
	%tmp.37 = load %Main* (%Main*,%String*) *, %Main* (%Main*,%String*) ** %tmp.36
	%tmp.38 = call %Main*(%Main*, %String*) %tmp.37( %Main* %tmp.32, %String* @String.2 )
	store %Main* %tmp.38, %Main** %tmp.9
	br label %end.0

end.0:
	%tmp.39 = load %Main*, %Main** %tmp.9
	%tmp.40 = alloca %Main*
	%tmp.41 = load %Complex*, %Complex** %tmp.8
	%tmp.42 = icmp eq %Complex* %tmp.41, null
	br i1 %tmp.42, label %abort, label %ok.6

ok.6:
	%tmp.43 = getelementptr %Complex, %Complex* %tmp.41, i32 0, i32 0
	%tmp.44 = load %Complex_vtable*, %Complex_vtable** %tmp.43
	%tmp.45 = getelementptr %Complex_vtable, %Complex_vtable* %tmp.44, i32 0, i32 13
	%tmp.46 = load %Complex* (%Complex*) *, %Complex* (%Complex*) ** %tmp.45
	%tmp.47 = call %Complex*(%Complex*) %tmp.46( %Complex* %tmp.41 )
	%tmp.48 = load %Complex*, %Complex** %tmp.8
	%tmp.49 = icmp eq %Complex* %tmp.48, null
	br i1 %tmp.49, label %abort, label %ok.8

ok.8:
	%tmp.50 = getelementptr %Complex, %Complex* %tmp.48, i32 0, i32 0
	%tmp.51 = load %Complex_vtable*, %Complex_vtable** %tmp.50
	%tmp.52 = getelementptr %Complex_vtable, %Complex_vtable* %tmp.51, i32 0, i32 14
	%tmp.53 = load %Complex* (%Complex*) *, %Complex* (%Complex*) ** %tmp.52
	%tmp.54 = call %Complex*(%Complex*) %tmp.53( %Complex* %tmp.48 )
	%tmp.55 = icmp eq %Complex* %tmp.54, null
	br i1 %tmp.55, label %abort, label %ok.7

ok.7:
	%tmp.56 = getelementptr %Complex, %Complex* %tmp.54, i32 0, i32 0
	%tmp.57 = load %Complex_vtable*, %Complex_vtable** %tmp.56
	%tmp.58 = getelementptr %Complex_vtable, %Complex_vtable* %tmp.57, i32 0, i32 15
	%tmp.59 = load %Complex* (%Complex*) *, %Complex* (%Complex*) ** %tmp.58
	%tmp.60 = call %Complex*(%Complex*) %tmp.59( %Complex* %tmp.54 )
	%tmp.61 = icmp eq %Complex* %tmp.60, null
	br i1 %tmp.61, label %abort, label %ok.5

ok.5:
	%tmp.62 = getelementptr %Complex, %Complex* %tmp.60, i32 0, i32 0
	%tmp.63 = load %Complex_vtable*, %Complex_vtable** %tmp.62
	%tmp.64 = getelementptr %Complex_vtable, %Complex_vtable* %tmp.63, i32 0, i32 16
	%tmp.65 = load i1 (%Complex*,%Complex*) *, i1 (%Complex*,%Complex*) ** %tmp.64
	%tmp.66 = call i1(%Complex*, %Complex*) %tmp.65( %Complex* %tmp.60, %Complex* %tmp.47 )
	br i1 %tmp.66, label %true.1, label %false.1

true.1:
	%tmp.67 = load %Main*, %Main** %tmp.0
	%tmp.68 = icmp eq %Main* %tmp.67, null
	br i1 %tmp.68, label %abort, label %ok.9

ok.9:
	%tmp.69 = getelementptr %Main, %Main* %tmp.67, i32 0, i32 0
	%tmp.70 = load %Main_vtable*, %Main_vtable** %tmp.69
	%tmp.71 = getelementptr %Main_vtable, %Main_vtable* %tmp.70, i32 0, i32 7
	%tmp.72 = load %Main* (%Main*,%String*) *, %Main* (%Main*,%String*) ** %tmp.71
	%tmp.73 = call %Main*(%Main*, %String*) %tmp.72( %Main* %tmp.67, %String* @String.1 )
	store %Main* %tmp.73, %Main** %tmp.40
	br label %end.1

false.1:
	%tmp.74 = load %Main*, %Main** %tmp.0
	%tmp.75 = icmp eq %Main* %tmp.74, null
	br i1 %tmp.75, label %abort, label %ok.10

ok.10:
	%tmp.76 = getelementptr %Main, %Main* %tmp.74, i32 0, i32 0
	%tmp.77 = load %Main_vtable*, %Main_vtable** %tmp.76
	%tmp.78 = getelementptr %Main_vtable, %Main_vtable* %tmp.77, i32 0, i32 7
	%tmp.79 = load %Main* (%Main*,%String*) *, %Main* (%Main*,%String*) ** %tmp.78
	%tmp.80 = call %Main*(%Main*, %String*) %tmp.79( %Main* %tmp.74, %String* @String.2 )
	store %Main* %tmp.80, %Main** %tmp.40
	br label %end.1

end.1:
	%tmp.81 = load %Main*, %Main** %tmp.40
	ret %Main* %tmp.81

abort:
	call void @abort(  )
	unreachable
}

define %Main* @Main_new() {

entry:
	%tmp.82 = getelementptr %Main_vtable, %Main_vtable* @Main_vtable_prototype, i32 0, i32 1
	%tmp.83 = load i32, i32* %tmp.82
	%tmp.84 = call i8*(i32) @malloc( i32 %tmp.83 )
	%tmp.85 = bitcast i8* %tmp.84 to %Main*
	%tmp.86 = getelementptr %Main, %Main* %tmp.85, i32 0, i32 0
	store %Main_vtable* @Main_vtable_prototype, %Main_vtable** %tmp.86
	%tmp.87 = alloca %Main*
	store %Main* %tmp.85, %Main** %tmp.87
	ret %Main* %tmp.85

abort:
	call void @abort(  )
	unreachable
}

define %Complex* @Complex_init(%Complex* %self, i32 %a, i32 %b) {

entry:
	%tmp.0 = alloca %Complex*
	store %Complex* %self, %Complex** %tmp.0
	%tmp.1 = alloca i32
	store i32 %a, i32* %tmp.1
	%tmp.2 = alloca i32
	store i32 %b, i32* %tmp.2
	%tmp.3 = load %Complex*, %Complex** %tmp.0
	%tmp.4 = getelementptr %Complex, %Complex* %tmp.3, i32 0, i32 1
	%tmp.5 = load i32, i32* %tmp.4
	%tmp.6 = load i32, i32* %tmp.1
	%tmp.7 = icmp eq i32 %tmp.5, %tmp.6
	%tmp.8 = load %Complex*, %Complex** %tmp.0
	%tmp.9 = getelementptr %Complex, %Complex* %tmp.8, i32 0, i32 2
	%tmp.10 = load i32, i32* %tmp.9
	%tmp.11 = load i32, i32* %tmp.2
	%tmp.12 = icmp eq i32 %tmp.10, %tmp.11
	%tmp.13 = load %Complex*, %Complex** %tmp.0
	ret %Complex* %tmp.13

abort:
	call void @abort(  )
	unreachable
}

define %Object* @Complex_print(%Complex* %self) {

entry:
	%tmp.14 = alloca %Complex*
	store %Complex* %self, %Complex** %tmp.14
	%tmp.15 = alloca %Complex*
	%tmp.16 = load %Complex*, %Complex** %tmp.14
	%tmp.17 = getelementptr %Complex, %Complex* %tmp.16, i32 0, i32 2
	%tmp.18 = load i32, i32* %tmp.17
	%tmp.19 = icmp eq i32 %tmp.18, 0
	br i1 %tmp.19, label %true.0, label %false.0

true.0:
	%tmp.20 = load %Complex*, %Complex** %tmp.14
	%tmp.21 = getelementptr %Complex, %Complex* %tmp.20, i32 0, i32 1
	%tmp.22 = load i32, i32* %tmp.21
	%tmp.23 = load %Complex*, %Complex** %tmp.14
	%tmp.24 = icmp eq %Complex* %tmp.23, null
	br i1 %tmp.24, label %abort, label %ok.0

ok.0:
	%tmp.25 = getelementptr %Complex, %Complex* %tmp.23, i32 0, i32 0
	%tmp.26 = load %Complex_vtable*, %Complex_vtable** %tmp.25
	%tmp.27 = getelementptr %Complex_vtable, %Complex_vtable* %tmp.26, i32 0, i32 8
	%tmp.28 = load %Complex* (%Complex*,i32) *, %Complex* (%Complex*,i32) ** %tmp.27
	%tmp.29 = call %Complex*(%Complex*, i32) %tmp.28( %Complex* %tmp.23, i32 %tmp.22 )
	store %Complex* %tmp.29, %Complex** %tmp.15
	br label %end.0

false.0:
	%tmp.30 = load %Complex*, %Complex** %tmp.14
	%tmp.31 = getelementptr %Complex, %Complex* %tmp.30, i32 0, i32 2
	%tmp.32 = load i32, i32* %tmp.31
	%tmp.33 = load %Complex*, %Complex** %tmp.14
	%tmp.34 = getelementptr %Complex, %Complex* %tmp.33, i32 0, i32 1
	%tmp.35 = load i32, i32* %tmp.34
	%tmp.36 = load %Complex*, %Complex** %tmp.14
	%tmp.37 = icmp eq %Complex* %tmp.36, null
	br i1 %tmp.37, label %abort, label %ok.4

ok.4:
	%tmp.38 = getelementptr %Complex, %Complex* %tmp.36, i32 0, i32 0
	%tmp.39 = load %Complex_vtable*, %Complex_vtable** %tmp.38
	%tmp.40 = getelementptr %Complex_vtable, %Complex_vtable* %tmp.39, i32 0, i32 8
	%tmp.41 = load %Complex* (%Complex*,i32) *, %Complex* (%Complex*,i32) ** %tmp.40
	%tmp.42 = call %Complex*(%Complex*, i32) %tmp.41( %Complex* %tmp.36, i32 %tmp.35 )
	%tmp.43 = icmp eq %Complex* %tmp.42, null
	br i1 %tmp.43, label %abort, label %ok.3

ok.3:
	%tmp.44 = getelementptr %Complex, %Complex* %tmp.42, i32 0, i32 0
	%tmp.45 = load %Complex_vtable*, %Complex_vtable** %tmp.44
	%tmp.46 = getelementptr %Complex_vtable, %Complex_vtable* %tmp.45, i32 0, i32 7
	%tmp.47 = load %Complex* (%Complex*,%String*) *, %Complex* (%Complex*,%String*) ** %tmp.46
	%tmp.48 = call %Complex*(%Complex*, %String*) %tmp.47( %Complex* %tmp.42, %String* @String.3 )
	%tmp.49 = icmp eq %Complex* %tmp.48, null
	br i1 %tmp.49, label %abort, label %ok.2

ok.2:
	%tmp.50 = getelementptr %Complex, %Complex* %tmp.48, i32 0, i32 0
	%tmp.51 = load %Complex_vtable*, %Complex_vtable** %tmp.50
	%tmp.52 = getelementptr %Complex_vtable, %Complex_vtable* %tmp.51, i32 0, i32 8
	%tmp.53 = load %Complex* (%Complex*,i32) *, %Complex* (%Complex*,i32) ** %tmp.52
	%tmp.54 = call %Complex*(%Complex*, i32) %tmp.53( %Complex* %tmp.48, i32 %tmp.32 )
	%tmp.55 = icmp eq %Complex* %tmp.54, null
	br i1 %tmp.55, label %abort, label %ok.1

ok.1:
	%tmp.56 = getelementptr %Complex, %Complex* %tmp.54, i32 0, i32 0
	%tmp.57 = load %Complex_vtable*, %Complex_vtable** %tmp.56
	%tmp.58 = getelementptr %Complex_vtable, %Complex_vtable* %tmp.57, i32 0, i32 7
	%tmp.59 = load %Complex* (%Complex*,%String*) *, %Complex* (%Complex*,%String*) ** %tmp.58
	%tmp.60 = call %Complex*(%Complex*, %String*) %tmp.59( %Complex* %tmp.54, %String* @String.4 )
	store %Complex* %tmp.60, %Complex** %tmp.15
	br label %end.0

end.0:
	%tmp.61 = load %Complex*, %Complex** %tmp.15
	%tmp.62 = bitcast %Complex* %tmp.61 to %Object*
	ret %Object* %tmp.62

abort:
	call void @abort(  )
	unreachable
}

define %Complex* @Complex_reflect_0(%Complex* %self) {

entry:
	%tmp.63 = alloca %Complex*
	store %Complex* %self, %Complex** %tmp.63
	%tmp.64 = load %Complex*, %Complex** %tmp.63
	%tmp.65 = getelementptr %Complex, %Complex* %tmp.64, i32 0, i32 1
	%tmp.66 = load i32, i32* %tmp.65
	%tmp.67 = load %Complex*, %Complex** %tmp.63
	%tmp.68 = getelementptr %Complex, %Complex* %tmp.67, i32 0, i32 1
	%tmp.69 = load i32, i32* %tmp.68
	%tmp.70 = sub i32 0, %tmp.69
	%tmp.71 = icmp eq i32 %tmp.66, %tmp.70
	%tmp.72 = load %Complex*, %Complex** %tmp.63
	%tmp.73 = getelementptr %Complex, %Complex* %tmp.72, i32 0, i32 2
	%tmp.74 = load i32, i32* %tmp.73
	%tmp.75 = load %Complex*, %Complex** %tmp.63
	%tmp.76 = getelementptr %Complex, %Complex* %tmp.75, i32 0, i32 2
	%tmp.77 = load i32, i32* %tmp.76
	%tmp.78 = sub i32 0, %tmp.77
	%tmp.79 = icmp eq i32 %tmp.74, %tmp.78
	%tmp.80 = load %Complex*, %Complex** %tmp.63
	ret %Complex* %tmp.80

abort:
	call void @abort(  )
	unreachable
}

define %Complex* @Complex_reflect_X(%Complex* %self) {

entry:
	%tmp.81 = alloca %Complex*
	store %Complex* %self, %Complex** %tmp.81
	%tmp.82 = load %Complex*, %Complex** %tmp.81
	%tmp.83 = getelementptr %Complex, %Complex* %tmp.82, i32 0, i32 2
	%tmp.84 = load i32, i32* %tmp.83
	%tmp.85 = load %Complex*, %Complex** %tmp.81
	%tmp.86 = getelementptr %Complex, %Complex* %tmp.85, i32 0, i32 2
	%tmp.87 = load i32, i32* %tmp.86
	%tmp.88 = sub i32 0, %tmp.87
	%tmp.89 = icmp eq i32 %tmp.84, %tmp.88
	%tmp.90 = load %Complex*, %Complex** %tmp.81
	ret %Complex* %tmp.90

abort:
	call void @abort(  )
	unreachable
}

define %Complex* @Complex_reflect_Y(%Complex* %self) {

entry:
	%tmp.91 = alloca %Complex*
	store %Complex* %self, %Complex** %tmp.91
	%tmp.92 = load %Complex*, %Complex** %tmp.91
	%tmp.93 = getelementptr %Complex, %Complex* %tmp.92, i32 0, i32 1
	%tmp.94 = load i32, i32* %tmp.93
	%tmp.95 = load %Complex*, %Complex** %tmp.91
	%tmp.96 = getelementptr %Complex, %Complex* %tmp.95, i32 0, i32 1
	%tmp.97 = load i32, i32* %tmp.96
	%tmp.98 = sub i32 0, %tmp.97
	%tmp.99 = icmp eq i32 %tmp.94, %tmp.98
	%tmp.100 = load %Complex*, %Complex** %tmp.91
	ret %Complex* %tmp.100

abort:
	call void @abort(  )
	unreachable
}

define i1 @Complex_equal(%Complex* %self, %Complex* %d) {

entry:
	%tmp.101 = alloca %Complex*
	store %Complex* %self, %Complex** %tmp.101
	%tmp.102 = alloca %Complex*
	store %Complex* %d, %Complex** %tmp.102
	%tmp.103 = alloca i1
	%tmp.104 = load %Complex*, %Complex** %tmp.101
	%tmp.105 = getelementptr %Complex, %Complex* %tmp.104, i32 0, i32 1
	%tmp.106 = load i32, i32* %tmp.105
	%tmp.107 = load %Complex*, %Complex** %tmp.102
	%tmp.108 = icmp eq %Complex* %tmp.107, null
	br i1 %tmp.108, label %abort, label %ok.5

ok.5:
	%tmp.109 = getelementptr %Complex, %Complex* %tmp.107, i32 0, i32 0
	%tmp.110 = load %Complex_vtable*, %Complex_vtable** %tmp.109
	%tmp.111 = getelementptr %Complex_vtable, %Complex_vtable* %tmp.110, i32 0, i32 17
	%tmp.112 = load i32 (%Complex*) *, i32 (%Complex*) ** %tmp.111
	%tmp.113 = call i32(%Complex*) %tmp.112( %Complex* %tmp.107 )
	%tmp.114 = icmp eq i32 %tmp.106, %tmp.113
	br i1 %tmp.114, label %true.1, label %false.1

true.1:
	%tmp.115 = alloca i1
	%tmp.116 = load %Complex*, %Complex** %tmp.101
	%tmp.117 = getelementptr %Complex, %Complex* %tmp.116, i32 0, i32 2
	%tmp.118 = load i32, i32* %tmp.117
	%tmp.119 = load %Complex*, %Complex** %tmp.102
	%tmp.120 = icmp eq %Complex* %tmp.119, null
	br i1 %tmp.120, label %abort, label %ok.6

ok.6:
	%tmp.121 = getelementptr %Complex, %Complex* %tmp.119, i32 0, i32 0
	%tmp.122 = load %Complex_vtable*, %Complex_vtable** %tmp.121
	%tmp.123 = getelementptr %Complex_vtable, %Complex_vtable* %tmp.122, i32 0, i32 18
	%tmp.124 = load i32 (%Complex*) *, i32 (%Complex*) ** %tmp.123
	%tmp.125 = call i32(%Complex*) %tmp.124( %Complex* %tmp.119 )
	%tmp.126 = icmp eq i32 %tmp.118, %tmp.125
	br i1 %tmp.126, label %true.2, label %false.2

true.2:
	store i1 true, i1* %tmp.115
	br label %end.2

false.2:
	store i1 false, i1* %tmp.115
	br label %end.2

end.2:
	%tmp.127 = load i1, i1* %tmp.115
	store i1 %tmp.127, i1* %tmp.103
	br label %end.1

false.1:
	store i1 false, i1* %tmp.103
	br label %end.1

end.1:
	%tmp.128 = load i1, i1* %tmp.103
	ret i1 %tmp.128

abort:
	call void @abort(  )
	unreachable
}

define i32 @Complex_x_value(%Complex* %self) {

entry:
	%tmp.129 = alloca %Complex*
	store %Complex* %self, %Complex** %tmp.129
	%tmp.130 = load %Complex*, %Complex** %tmp.129
	%tmp.131 = getelementptr %Complex, %Complex* %tmp.130, i32 0, i32 1
	%tmp.132 = load i32, i32* %tmp.131
	ret i32 %tmp.132

abort:
	call void @abort(  )
	unreachable
}

define i32 @Complex_y_value(%Complex* %self) {

entry:
	%tmp.133 = alloca %Complex*
	store %Complex* %self, %Complex** %tmp.133
	%tmp.134 = load %Complex*, %Complex** %tmp.133
	%tmp.135 = getelementptr %Complex, %Complex* %tmp.134, i32 0, i32 2
	%tmp.136 = load i32, i32* %tmp.135
	ret i32 %tmp.136

abort:
	call void @abort(  )
	unreachable
}

define %Complex* @Complex_new() {

entry:
	%tmp.137 = getelementptr %Complex_vtable, %Complex_vtable* @Complex_vtable_prototype, i32 0, i32 1
	%tmp.138 = load i32, i32* %tmp.137
	%tmp.139 = call i8*(i32) @malloc( i32 %tmp.138 )
	%tmp.140 = bitcast i8* %tmp.139 to %Complex*
	%tmp.141 = getelementptr %Complex, %Complex* %tmp.140, i32 0, i32 0
	store %Complex_vtable* @Complex_vtable_prototype, %Complex_vtable** %tmp.141
	%tmp.142 = alloca %Complex*
	store %Complex* %tmp.140, %Complex** %tmp.142
	%tmp.143 = getelementptr %Complex, %Complex* %tmp.140, i32 0, i32 1
	store i32 0, i32* %tmp.143
	%tmp.144 = getelementptr %Complex, %Complex* %tmp.140, i32 0, i32 2
	store i32 0, i32* %tmp.144
	ret %Complex* %tmp.140

abort:
	call void @abort(  )
	unreachable
}

